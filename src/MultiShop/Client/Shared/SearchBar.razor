@using System.Text.Json
@using Microsoft.Extensions.Logging
@inject ILogger<SearchBar> Logger

<div @attributes="AdditionalAttributes" class=@groupClassCss>
    <input type="text" class="form-control" placeholder=@SearchPlaceholder aria-label=@SearchPlaceholder id="search-input" @bind="Query" @onkeyup="@(async (a) => {if (a.Code == "Enter" || a.Code == "NumpadEnter") await Search();})" autocomplete="off" disabled="@Disabled">
    <div class="input-group-append">
        @Append
        <button class="btn btn-outline-primary" type="button" @onclick="@(async () => await Search())" disabled="@Disabled">Search</button>
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter]
    public RenderFragment Append { get; set; }

    [Parameter]
    public string SearchPlaceholder { get; set; }

    public string Query { get; set; }

    [Parameter]
    public EventCallback<string> OnSearchRequested { get; set; }

    public bool Disabled { get; private set; }

    private string groupClassCss => "input-group " + (AdditionalAttributes != null && AdditionalAttributes.ContainsKey("class") ? AdditionalAttributes["class"] as string : null);

    public async Task Search()
    {
        Disabled = true;
        await OnSearchRequested.InvokeAsync(Query);
        Disabled = false;
    }
}