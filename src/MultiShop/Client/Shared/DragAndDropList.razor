@using MultiShop.Shared.Models
@typeparam TItem
@inject IJSRuntime JS

<ul class=@ListGroupCss style="width: max-content;" ondragover="event.preventDefault()">
    @foreach (TItem item in Items)
    {
        <li class="list-group-item list-group-item-action" draggable=@((!processingDropChange).ToString()) @ondragstart="@(() => itemDraggedIndex = Items.IndexOf(item))" @ondrop="@(async () => await OnDrop(item))">
            <div class="d-inline-flex">
                <div class="mr-3">
                    <button class="btn" type="button" style="padding: 0px;" @onclick="@(() => OnButtonClickMove(Items.IndexOf(item), true))" disabled="@(processingDropChange || Items.IndexOf(item) <= 0)"><span class="oi oi-caret-top"></span></button>
                    <button class="btn" type="button" style="padding: 0px;" @onclick="@(() => OnButtonClickMove(Items.IndexOf(item), false))" disabled="@(processingDropChange || Items.IndexOf(item) >= Items.Count - 1)"><span class="oi oi-caret-bottom"></span></button>
                </div>
                <div>
                    @DraggableItem(item)
                </div>
            </div>
        </li>
    }
</ul>


@code {
    [CascadingParameter(Name = "RuntimeDependencyManager")]
    private RuntimeDependencyManager RuntimeDependencyManager {get; set;}

    private ApplicationProfile ApplicationProfile {get; set;}

    [Parameter]
    public IList<TItem> Items { get; set; }

    [Parameter]
    public string AdditionalListClasses { get; set; }

    [Parameter]
    public EventCallback OnOrderChange { get; set; }

    [Parameter]
    public RenderFragment<TItem> DraggableItem { get; set; }

    private int itemDraggedIndex = -1;
    private bool processingDropChange = false;


    private string ListGroupCss
    {
        get => "list-group " + AdditionalListClasses;
    }

    protected override async Task OnParametersSetAsync()
    {
        AdditionalListClasses = AdditionalListClasses ?? "";
        await base.OnParametersSetAsync();
    }

    protected override void OnInitialized()
        {
            base.OnInitialized();
            this.ApplicationProfile = RuntimeDependencyManager.Get<ApplicationProfile>();
        }

    

    private async Task OnDrop(TItem dropped)
    {
        int dragIndex = itemDraggedIndex;
        itemDraggedIndex = -1;
        await MoveOrder(dragIndex, Items.IndexOf(dropped));
    }

    private async Task OnButtonClickMove(int index, bool up) {
        if (up) {
            await MoveOrder(index, index - 1);
        } else {
            await MoveOrder(index, index + 1);
        }
    }

    private async Task MoveOrder(int from, int to)
    {
        if (from == to || from >= Items.Count || from < 0 || to > Items.Count || to < 0) return;
        TItem item = Items[from];
        Items.RemoveAt(from);
        Items.Insert(to, item);
        processingDropChange = true;
        await OnOrderChange.InvokeAsync();
        processingDropChange = false;
    }
}
